
var compilers = require("../"),
    path = require("path"),
    fs = require("fs"),
    should = require("should"),
    files = fs.readdirSync(path.join(__dirname, "fixtures"));


describe("#constructor", function() {

  it("requires when fetch is false", function(done) {
    var compiler = compilers("handlebars", { fetch : false });
    compiler("{{ x }}", { x : "Hi" }, function(err, compiled) {
      compiled.should.equal("Hi");
      done(err);
    })
  });

  it("throws error on missing package", function() {
    (function() { compilers("JKDFJKDFJDKLFKDFSKLNASFISF") }).should.throw();
  });

});


describe("#defaultCompilerForExtension", function() {

  it("returns a compiler when one exists", function() {
    compilers.defaultCompilerForExtension("coffee").should.equal("coffee-script");
  });

  it("returns nothing when a compiler doesn't exist", function() {
    should.not.exist(compilers.defaultCompilerForExtension("JF(#)"));
  });

});


describe("#createFunction", function(done) {

  it("templates with variables", function(done) {
    var compiler = compilers("handlebars");
    compiler("{{ x }}", { x : "Hi" }, function(err, compiled) {
      compiled.should.equal("Hi");
      done(err);
    })
  });

  it("templates without variables", function(done) {
    var compiler = compilers("handlebars");
    compiler("<html>", function(err, compiled) {
      compiled.should.equal("<html>");
      done(err);
    })
  });

});


function test(file) {
  var locals = { greeting: "Hello" },
      name = file.replace(/\.js$/g, "");

  describe(name, function() {
    this.timeout(20000);

    it("should compile correctly", function(next) {
      var p = path.join(__dirname, "fixtures", file),
          test = require(p),
          compiler = compilers(name);

      compiler(test.input, locals, function(err, compiled) {
        try {
          // Strip "generated by" as versions will change
          compiled = compiled.replace(/\/\/[^\n\r]*generated by[^\n\r]*\n/gi, "");
          compiled.should.equal(test.output);
          next();
        } catch (err) {
          console.log(compiled);
          next(err);
        }
      });
    });

  });
};

files.forEach(test);
